{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _react = _interopRequireDefault(require(\"react\"));\nvar _debounce = _interopRequireDefault(require(\"./debounce\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n  return _typeof(obj);\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n  return _assertThisInitialized(self);\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nvar EventSpy = /*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(EventSpy, _React$Component);\n  function EventSpy(props, context) {\n    var _this;\n    _classCallCheck(this, EventSpy);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(EventSpy).call(this, props, context));\n    _this.createDebouncer();\n    _this.handleEvent = _this.handleEvent.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n  _createClass(EventSpy, [{\n    key: \"createDebouncer\",\n    value: function createDebouncer() {\n      var _this2 = this;\n      this.debouncer = (0, _debounce.default)(function (event) {\n        _this2.props.onEvent && _this2.props.onEvent(event);\n      }, this.props.debounce);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var target = this.props.target;\n      if (target) {\n        target.addEventListener(this.props.name, this.handleEvent, {\n          passive: true\n        });\n        this.handleEvent({\n          target: target,\n          type: this.props.name\n        });\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var prevName = prevProps.name,\n        prevTarget = prevProps.target;\n      var _this$props = this.props,\n        name = _this$props.name,\n        target = _this$props.target;\n      if (target !== prevTarget || name !== prevName) {\n        if (prevTarget) {\n          prevTarget.removeEventListener(prevName, this.handleEvent);\n        }\n        if (target) {\n          target.addEventListener(name, this.handleEvent, {\n            passive: true\n          });\n          this.handleEvent({\n            target: target,\n            type: this.props.name\n          });\n        }\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var target = this.props.target;\n      target && target.removeEventListener(this.props.name, this.handleEvent);\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(_ref) {\n      var nextDebounce = _ref.debounce;\n      if (this.props.debounce !== nextDebounce) {\n        this.createDebouncer();\n      }\n    }\n  }, {\n    key: \"handleEvent\",\n    value: function handleEvent(event) {\n      event.timeStampLow = Date.now();\n      this.debouncer(event);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return false;\n    }\n  }]);\n  return EventSpy;\n}(_react.default.Component);\nexports.default = EventSpy;\nEventSpy.defaultProps = {\n  debounce: 200\n};","map":null,"metadata":{},"sourceType":"script"}